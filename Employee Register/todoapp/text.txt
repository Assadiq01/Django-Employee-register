Great! Here's an example of how you can create a complete employee registration app using Django.
 First, create a new Django project and app:  django-admin startproject employee_register
  cd employee_register python manage.py startapp employees  Then, create the `Employee` and
   `Department` models in `employees/models.py`: 
from django.db import models class Department(models.Model): name = models.CharField(max_length=50)
 def __str__(self): return self.name class Employee(models.Model): name = models.CharField(max_length=50)
  email = models.EmailField() phone_number = models.CharField(max_length=15) department = models.ForeignKey
  (Department, on_delete=models.CASCADE) def __str__(self): return self.name  Next, create the views in
   `employees/views.py` to handle adding new employees, listing employees, and searching for employees:
     from django.shortcuts import render, redirect from .models import Employee from .forms import EmployeeForm
      def employee_list(request): employees = Employee.objects.all() return render(request, 'employees/employee_list.html',
       {'employees': employees}) def employee_create(request): if request.method == 'POST': form = EmployeeForm(request.POST) 
       if form.is_valid(): form.save() return redirect('employee_list') else: form = EmployeeForm() return render(request, 'employees/employee_form.html', {'form': form}) def employee_search(request): if request.method == 'GET': search_query = request.GET.get('q') employees = Employee.objects.filter(name__icontains=search_query) return render(request, 'employees/employee_list.html', {'employees': employees})  Notice that we are using a `Department` foreign key in the `Employee` model. This means that you will also need to create a form for adding employees that includes a dropdown for selecting the department. Create a new file called `forms.py` and add the following code:  from django import forms from .models import Employee, Department class EmployeeForm(forms.ModelForm): department = forms.ModelChoiceField(queryset=Department.objects.all()) class Meta: model = Employee fields = ['name', 'email', 'phone_number', 'department']  Finally, create the templates in `employees/templates/employees/` folder: 1. `employee_list.html` which displays a list of all employees.  {% extends 'base.html' %} {% block content %}
Employee List
Add Employee
 
{% for employee in employees %} {% endfor %}
Name	Email	Phone	Department
{{ employee.name }}	{{ employee.email }}	{{ employee.phone_number }}	{{ employee.department }}
{% endblock %}  2. `employee_form.html` which displays a form for adding an employee.  {% extends 'base.html' %} {% block content %}
Add Employee
{% csrf_token %} {{ form.as_p }} 
{% endblock %}  3. `base.html` which includes a basic header and footer. 
Employee Register
{% block content %} {% endblock %}
Â© 2021 Employee Register

 4. `employee_search.html` which displays a list of employees that match a search query.  {% extends 'employee_list.html' %} {% block content %}
Search Results
{% for employee in employees %} {% endfor %}
Name	Email	Phone	Department
{{ employee.name }}	{{ employee.email }}	{{ employee.phone_number }}	{{ employee.department }}
{% endblock %}  Finally, add the URLs to `employees/urls.py`:  from django.urls import path from .views import employee_list, employee_create, employee_search urlpatterns = [ path('', employee_list, name='employee_list'), path('add/', employee_create, name='employee_create'), path('search/', employee_search, name='employee_search'), ]  That's it! Now you can run the app and go to `http://localhost:8000/employees/` to see a list of employees, add new employees at `http://localhost:8000/employees/add/`, and search for employees using `http://localhost:8000/employees/search/?q=John`.